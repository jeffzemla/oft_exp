#!/usr/bin/python

# need to add some warning when no parameter fit is found (4 cases; can use handfix_optimal.xlsx to find values)

print "Loading sympy... ",
from sympy import * # Symbol, nsolve, diff, tanh, etc
from math import pi, e
import numpy as np

print "done"

# user-set parameters
subj=9               # starts at 0. not actual subject number 
method="multi" # single or multi

allsubs=[]

# declare symbols
x=Symbol("x")
y=Symbol("y")

print "Loading data..."

# mixed only
v_list=[[0.040826,0.035663,0.045085,0.086017,0.075329,0.074522,0.072538,0.11966,0.17046,0.20741,0.2172,0.22359],
        [0.27932,0.43893,0.24849,0.36766,0.40492,0.42191,0.26389,0.34333,0.48915,0.46913,0.54341,0.51634],
        [0.12923,0.19539,0.1633,0.17486,0.042809,0.077186,0.061564,0.099203,0.13406,0.19922,0.17378,0.16292],
        [0.078218,0.20901,0.10788,0.21677,0.081851,0.11484,0.11655,0.23639,0.27943,0.29675,0.10521,0.22064],
        [0.034156,0.055574,0.12625,0.085501,0.061507,0.15467,0.17118,0.11477,0.1269,0.26258,0.15079,0.36959],
        [0.21891,0.27298,0.21389,0.1896,0.16748,0.30275,0.39931,0.42693,0.32663,0.39222,0.35858,0.41183],
        [0.09274,0.31013,0.085238,0.1132,0.14044,0.15574,0.12616,0.10558,0.10355,0.15728,0.15682,0.31785],
        [0.019703,0.027807,0.030044,0.035252,0.12236,0.31968,0.14036,0.39352,0.28401,0.36015,0.15236,0.33849],
        [0.043012,0.086344,0.053168,0.072982,0.21392,0.35004,0.20172,0.37337,0.25938,0.1841,0.2846,0.33993],
        [0.021036,0.068603,0.039746,0.012105,0.1089,0.28645,0.061553,0.054371,0.37996,0.38008,0.26415,0.47914],
        [0.093498,0.09533,0.085546,0.13852,0.10773,0.13993,0.14085,0.19293,0.17784,0.37452,0.40854,0.35932],
        [0.22119,0.34155,0.29159,0.26251,0.28345,0.2381,0.32606,0.26142,0.33095,0.30922,0.26777,0.26211],
        [0.11077,0.2967,0.12569,0.40185,0.058364,0.088631,0.04171,0.057919,0.085134,0.043162,0.06329,0.097857],
        [0.099004,0.1326,0.12334,0.14678,0.11555,0.18152,0.089088,0.1119,0.090754,0.12416,0.11486,0.1091],
        [0.18152,0.40013,0.18911,0.34895,0.135,0.12706,0.11995,0.13781,0.092296,0.10641,0.096186,0.11459],
        [0.10348,0.14079,0.08426,0.17534,0.19567,0.19669,0.16528,0.23006,0.67067,0.48104,0.30735,0.34898],
        [0.028827,0.057452,0.03702,0.070989,0.062005,0.055446,0.079413,0.065097,0.048651,0.090093,0.043794,0.040233],
        [0.084322,0.10297,0.030003,0.063776,0.081424,0.11252,0.083872,0.2146,0.14907,0.29011,0.054379,0.035656],
        [0.044334,0.067599,0.066023,0.091168,0.081522,0.064451,0.030849,0.029167,0.026144,0.070273,0.015468,0.072656],
        [0.40773,0.52889,0.38574,0.46726,0.4296,0.58502,0.45313,0.47419,0.38968,0.53732,0.4842,0.49592],
        [0.076187,0.19061,0.090202,0.081665,0.22544,0.26845,0.088736,0.11504,0.13975,0.15779,0.14874,0.15971],
        [0.1252,0.2012,0.12549,0.16302,0.08779,0.14608,0.091737,0.11796,0.12315,0.13357,0.15357,0.1909],
        [0.027636,0.058667,0.11107,0.078415,0.080826,0.088486,0.070476,0.090086,0.21097,0.12065,0.10776,0.11512],
        [0.16226,0.097313,0.21442,0.21561,0.22114,0.22536,0.20272,0.27784,0.31832,0.32823,0.23767,0.43874],
        [0.3225,0.29937,0.27873,0.30268,0.25412,0.29949,0.29379,0.26984,0.28446,0.29885,0.27869,0.3005],
        [0.11116,0.15493,0.069609,0.1339,0.12784,0.31388,0.095926,0.13395,0.17177,0.22509,0.096746,0.17898]]

# subset of all
#v_list=[[0.034732,0.03587,0.047847,0.091834,0.077483,0.1045,0.053512,0.12208,0.17161,0.22029,0.20672,0.24553],
#        [0.18887,0.17808,0.21464,0.26527,0.26902,0.3294,0.16022,0.27658,0.32366,0.34194,0.31328,0.34248],
#        [0.090417,0.18442,0.1392,0.13327,0.0062838,0.05476,0.054063,0.092066,0.076355,0.19382,0.16874,0.14034],
#        [0.050849,0.1309,0.08522,0.1452,0.055476,0.09043,0.092888,0.19579,0.18427,0.23834,0.096926,0.20462],
#        [0.035224,0.043288,0.089109,0.069712,0.024723,0.11788,0.14405,0.1332,0.083495,0.2333,0.085924,0.15496],
#        [0.1248,0.15538,0.050936,0.10995,0.14423,0.269,0.3245,0.32194,0.23326,0.29729,0.26565,0.35316],
#        [0.069513,0.14431,0.05887,0.033911,0.061172,0.091942,0.078643,0.069244,0.045156,0.086489,0.1069,0.24411],
#        [0.022725,0.038531,0.0076412,0.035863,0.10429,0.11464,0.10219,0.18444,0.28633,0.38026,0.10308,0.28968],
#        [0.027181,0.045927,-0.018124,0.044215,0.16884,0.26119,0.17682,0.34735,0.21436,0.15335,0.2631,0.30213],
#        [0.0038557,0.06133,0.059617,0.01711,0.10102,0.26477,0.048417,0.041068,0.43778,0.40007,0.21148,0.45891],
#        [0.060172,0.063188,0.034768,0.12108,0.037919,0.1065,0.1205,0.13741,0.13956,0.2802,0.26575,0.2314],
#        [0.1292,0.15455,0.13711,0.25468,0.083861,0.097796,0.16132,0.1451,0.19882,0.27884,0.18023,0.30081],
#        [0.11086,0.25987,0.07081,0.215,0.029068,0.06324,0.034258,0.037186,0.029207,0.051552,0.017198,0.060731],
#        [0.10235,0.11851,0.11987,0.14165,0.11496,0.17572,0.099395,0.10552,0.080266,0.13074,0.12831,0.11459],
#        [0.15815,0.30887,0.18253,0.28484,0.091895,0.094961,0.080997,0.11134,0.061323,0.091784,0.047864,0.083023],
#        [0.12948,0.13925,0.11569,0.12616,0.16712,0.16627,0.17216,0.22205,0.40594,0.50042,0.28231,0.32198],
#        [0.019918,0.031975,0.042211,0.072148,0.061365,0.052975,0.052267,0.042069,0.059354,0.075932,0.025271,0.029277],
#        [0.052846,0.085366,0.038372,0.020897,0.066182,0.1356,0.087864,0.1241,0.155,0.23477,0.073958,0.02535],
#        [0.004522,0.071278,0.049953,0.095825,0.043601,0.026377,0.016244,-0.00071944,0.021811,0.069106,0.029461,0.059605],
#        [0.24598,0.42774,0.32242,0.33206,0.30138,0.43914,0.23207,0.377,0.26395,0.39261,0.29917,0.34992],
#        [0.023473,0.084235,0.072342,0.015911,0.17223,0.21179,0.058291,0.069045,0.084824,0.081149,0.087377,0.10534],
#        [0.13532,0.19498,0.13611,0.15297,0.060724,0.12158,0.080892,0.1129,0.10656,0.14112,0.14223,0.21148],
#        [0.022852,0.063916,0.058441,0.076341,0.045273,0.0689,0.064615,0.07352,0.1794,0.12271,0.11184,0.1163],
#        [0.15422,0.097592,0.21599,0.19362,0.19726,0.31285,0.17381,0.22275,0.28041,0.28542,0.25464,0.27659],
#        [0.21281,0.23017,0.20669,0.23824,0.18366,0.21296,0.22368,0.20347,0.20492,0.31029,0.22126,0.33066],
#        [0.12062,0.11225,0.051481,0.14849,0.081432,0.23786,0.1529,0.12172,0.14677,0.19086,0.074883,0.12147]]

# mixed only
ter_list=[[0.46698,0.30832,0.30284,0.40957,0.41583,0.43513,0.47801,0.44255,0.37639,0.37949,0.37783,0.3745],
            [0.41682,0.022614,0.40661,0.42098,0.28258,0.32543,0.3442,0.36805,0.22553,0.31043,0.27728,0.24821],
            [0.34192,0.33783,0.33953,0.33492,0.30526,0.33838,0.38088,0.39858,0.32878,0.3578,0.33282,0.30374],
            [0.3409,0.35037,0.37987,0.3253,0.32404,0.38827,0.34636,0.27492,0.20233,0.28117,0.29168,0.283],
            [0.27948,0.45083,0.54988,0.54338,0.45412,0.44479,0.42547,0.43077,0.41414,0.36428,0.36348,0.14637],
            [0.25901,0.24792,0.22205,0.22181,0.33266,0.30325,0.23857,0.29694,0.30412,0.29512,0.29841,0.28608],
            [0.40328,0.40638,0.3966,0.53337,0.44254,0.46086,0.44502,0.40212,0.38192,0.42656,0.41584,0.25786],
            [0.016632,0.00054606,0.0007793,0.010824,0.48149,0.3442,0.43535,0.315,0.3444,0.24421,0.35116,0.36035],
            [0.28238,0.46556,0.44909,0.45369,0.31564,0.22674,0.27217,0.22625,0.28105,0.31483,0.32066,0.31666],
            [0.038457,0.22061,0.23132,0.048746,0.31082,0.26828,0.31483,0.078476,0.27909,0.30963,0.31894,0.28124],
            [0.3258,0.29115,0.33331,0.34866,0.45377,0.44799,0.4269,0.42661,0.36609,0.32461,0.30525,0.28538],
            [0.36132,0.27216,0.50932,0.42835,0.23175,0.39743,0.39753,0.40753,0.27294,0.32651,0.31766,0.25201],
            [0.45539,0.46307,0.57459,0.29948,0.36372,0.37481,0.2239,0.15109,0.22028,0.26259,0.25546,0.28529],
            [0.33512,0.32315,0.24748,0.31789,0.35252,0.44607,0.38067,0.26328,0.25894,0.3252,0.31318,0.30042],
            [0.39553,0.3871,0.33628,0.3013,0.32117,0.29314,0.2329,0.25682,0.26037,0.2587,0.24237,0.21795],
            [0.014525,0.093582,0.15527,0.0017759,0.020871,0.39969,0.00057998,0.40797,0.057226,0.37552,0.29634,0.37386],
            [0.40538,0.59451,0.37372,0.39036,0.39854,0.32351,0.32602,0.24189,0.3697,0.42713,0.39101,0.16708],
            [0.33401,0.32387,0.14815,0.18617,0.33971,0.31198,0.39482,0.34109,0.3785,0.34465,0.30466,0.17562],
            [0.42043,0.31792,0.43702,0.43478,0.36192,0.32404,0.2547,0.34644,0.3162,0.36917,0.37843,0.35904],
            [0.28571,0.30813,0.31759,0.30965,0.32222,0.3038,0.28465,0.30921,0.32594,0.36657,0.32155,0.32686],
            [0.32009,0.22351,0.27383,0.35836,0.29983,0.31888,0.35044,0.35474,0.32435,0.36236,0.32113,0.34516],
            [0.31533,0.43337,0.33897,0.36544,0.31917,0.3201,0.33025,0.27419,0.26632,0.31733,0.3219,0.3426],
            [0.0017136,0.0016673,0.15152,0.00068749,0.43828,0.58412,0.35969,0.4162,0.13378,0.30033,0.30888,0.32461],
            [0.076578,0.29508,0.11959,0.32971,0.24259,0.3654,0.34855,0.31007,0.28897,0.34357,0.35923,0.27372],
            [0.33218,0.33251,0.17693,0.28391,0.25366,0.21084,0.31064,0.34107,0.32242,0.31578,0.33161,0.28784],
            [0.37568,0.3843,0.40269,0.40353,0.41999,0.37907,0.38894,0.38944,0.38873,0.39513,0.41542,0.39248]]

# subset of all
#ter_list=[[0.49139,0.43183,0.40513,0.40732,0.38849,0.46616,0.48639,0.46485,0.38302,0.38235,0.38391,0.37818],
#        [0.25619,0.0006745,0.28475,0.23264,0.30383,0.36395,0.31985,0.34511,0.27685,0.32529,0.2803,0.30783],
#        [0.27822,0.32706,0.32214,0.32059,0.31392,0.31625,0.38698,0.30253,0.31771,0.35569,0.33058,0.30738],
#        [0.011962,0.063802,0.32097,0.21551,0.29736,0.37521,0.33933,0.31962,0.27741,0.30337,0.28112,0.29648],
#        [0.15755,0.24775,0.2717,0.49573,0.47013,0.43486,0.40684,0.42572,0.27172,0.25445,0.2998,0.17523],
#        [0.2926,0.3229,0.26387,0.15367,0.34303,0.22909,0.25362,0.020519,0.30777,0.27838,0.31736,0.28052],
#        [0.41297,0.42057,0.02244,0.13896,0.2961,0.46286,0.42982,0.34638,0.37013,0.43339,0.38255,0.31132],
#        [0.0080938,0.23153,0.0084397,0.17212,0.37668,0.21562,0.4338,0.32731,0.33766,0.22218,0.35774,0.37514],
#        [0.26099,0.21427,0.41444,0.32112,0.32115,0.25089,0.26845,0.24698,0.29217,0.29992,0.3139,0.32575],
#        [0.13361,0.22658,0.21439,0.16688,0.30823,0.26878,0.24349,0.38962,0.25465,0.3041,0.31833,0.29547],
#        [0.31237,0.28262,0.32273,0.2996,0.41402,0.27217,0.43686,0.4364,0.37175,0.34393,0.35002,0.31721],
#        [0.28805,0.24207,0.35209,0.21743,0.12242,0.40059,0.0080072,0.32144,0.34727,0.34017,0.29367,0.28942],
#        [0.44911,0.45924,0.48028,0.29161,0.31054,0.32001,0.16625,0.41011,0.30183,0.20672,0.23886,0.27836],
#        [0.32477,0.25657,0.25246,0.31633,0.37307,0.44304,0.37991,0.25974,0.25631,0.33084,0.3175,0.31086],
#        [0.3838,0.4274,0.3505,0.31752,0.32552,0.2832,0.22766,0.26318,0.25961,0.25747,0.23994,0.19409],
#        [0.15617,0.17996,0.2355,0.22745,0.14169,0.4178,0.22466,0.31495,0.28223,0.36274,0.34386,0.3314],
#        [0.34549,0.21817,0.23048,0.36082,0.37505,0.32204,0.30567,0.25924,0.35518,0.3166,0.37376,0.35582],
#        [0.27777,0.24807,0.20754,0.17082,0.33334,0.36468,0.417,0.30608,0.34523,0.35295,0.28351,0.038721],
#        [0.41493,0.30223,0.40486,0.39788,0.27227,0.29857,0.37551,0.31976,0.24425,0.35338,0.36581,0.35282],
#        [0.31489,0.31664,0.32828,0.32588,0.32735,0.32732,0.31374,0.32285,0.33216,0.33821,0.33633,0.33836],
#        [0.084394,0.074404,0.28626,0.30683,0.28479,0.32519,0.33347,0.34962,0.30726,0.36236,0.32365,0.35977],
#        [0.31273,0.42814,0.33556,0.35844,0.31726,0.27868,0.32016,0.27374,0.26036,0.31338,0.32452,0.3412],
#        [0.22819,0.12997,0.0034112,0.019255,0.31397,0.41087,0.21268,0.42228,0.21228,0.30998,0.29961,0.31381],
#        [0.077321,0.24176,0.20153,0.33819,0.27868,0.21141,0.18861,0.39539,0.31843,0.37138,0.36513,0.31346],
#        [0.39933,0.37505,0.23056,0.31672,0.33704,0.27125,0.37821,0.35274,0.37074,0.23196,0.29694,0.23426],
#        [0.38211,0.38363,0.12244,0.3669,0.41817,0.35283,0.43227,0.45597,0.39306,0.41921,0.24955,0.38819]]

def fitSubj(subj):

    for cond in [0,2,4,6,8,10]:
        print "Fitting subject", subj
        allconds=[]

        isi=1.5                     # length of ISI
        s=0.1
        v1=v_list[subj][cond]
        ter1=ter_list[subj][cond]
        v2=v_list[subj][cond+1]
        ter2=ter_list[subj][cond+1]
        init=.01                    # starting point and increment
        start=init
        maxval=.3


        # uses bogacz method and then multiplies threshold by 2 before output

        if method=="single":
            g1=(1-(1/(1+e**((2*v1*x)/(s**2)))))
            dt1=((x/v1)*tanh((v1*x)/(s**2)))+ter1
            g2=(1-(1/(1+e**((2*v2*x)/(s**2)))))
            dt2=((x/v2)*tanh((v2*x)/(s**2)))+ter2
            result=[0] # initialization
        if method=="multi":
            g1=(1-(1/(1+e**((2*v1*x)/(s**2)))))
            dt1=((x/v1)*tanh((v1*x)/(s**2)))+ter1
            g2=(1-(1/(1+e**((2*v2*y)/(s**2)))))
            dt2=((y/v2)*tanh((v2*y)/(s**2)))+ter2
        if method=="single":
            result=[0]
        if method=="multi":
            result=[0,0]
        

        def incr(start):
            print "no fit! trying a new starting point", start
            return start + init

        while not(all([i > 0 for i in result])) and start < maxval:

            rr=(0.5*g1+0.5*g2)/(isi+(0.5*dt1+0.5*dt2))

            if method=="single":
                try:
                    result=[nsolve(diff(rr,x),x,start)]
                    if not(all([i > 0 for i in result])):
                        break
                except:
                   start=incr(start) 

            if method=="multi":
                try:
                    result=nsolve((diff(rr,x),diff(rr,y)),(x,y),(start,start))
                    if not(all([i > 0 for i in result])):
                        break
                except:
                   start=incr(start)

        #print result*2 # convert for bogacz to ratcliff --> bogacz is -a to a boundaries, ratcliff is 0 to a
        allsubs.append([float(i*2) for i in result])
    allsubs.append(allconds)
    
for subj in range(len(v_list)):
    fitSubj(subj)
    

print allsubs
